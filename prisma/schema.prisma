// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model (Adapted for Auth.js)
model User {
  id              String            @id @default(uuid())
  name            String?
  lastname        String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  password        String?           // Keep for credentials provider
  phone           String?
  address         String?
  city            String?
  province        String?
  postalCode      String?
  country         String            @default("DRC")
  userType        UserType          @default(CUSTOMER)
  createdAt       DateTime          @default(now())
  isVerified      Boolean           @default(false) // Can be linked to emailVerified
  lastLogin       DateTime?
  status          UserStatus        @default(ACTIVE)

  accounts        Account[]
  sessions        Session[]
  sellerProfile   Seller?
  orders          Order[]
  productReviews  ProductReview[]
  wishlistItems   WishlistItem[]
  browsingHistory BrowsingHistory[]
  OrderStatusHistory OrderStatusHistory[]
  ReviewReply     ReviewReply[]
  CouponUse       CouponUse[]
}

enum UserType {
  CUSTOMER
  SELLER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// Seller Model
model Seller {
  id                    String             @id @default(uuid())
  user                  User               @relation(fields: [userId], references: [id])
  userId                String             @unique
  shopName              String
  shopDescription       String?
  averageRating         Float?
  createdAt             DateTime           @default(now())
  verificationStatus    VerificationStatus @default(UNVERIFIED)
  verificationDocuments String?
  products              Product[]

  Shipment Shipment[]
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
}

// Category Model
model Category {
  id                 String              @id @default(uuid())
  name               String
  description        String?
  parent             Category?           @relation("CategoryParent", fields: [parentId], references: [id])
  parentId           String?
  level              Int
  path               String?
  imageUrl           String?
  isActive           Boolean             @default(true)
  children           Category[]          @relation("CategoryParent")
  products           Product[]
  categoryAttributes CategoryAttribute[]
}

// Attribute Model
model Attribute {
  id                 String              @id @default(uuid())
  name               String
  dataType           DataType
  isRequired         Boolean             @default(false)
  isVariant          Boolean             @default(false)
  attributeValues    AttributeValue[]
  categoryAttributes CategoryAttribute[]
  productAttributes  ProductAttribute[]
  variantAttributes  VariantAttribute[]
}

enum DataType {
  TEXT
  NUMBER
  DECIMAL
  BOOLEAN
  LIST
}

// AttributeValue Model
model AttributeValue {
  id                String             @id @default(uuid())
  attribute         Attribute          @relation(fields: [attributeId], references: [id])
  attributeId       String
  value             String
  sortOrder         Int                @default(0)
  productAttributes ProductAttribute[] @relation("AttributeValueProduct")
  variantAttributes VariantAttribute[]
}

// CategoryAttribute Model
model CategoryAttribute {
  id          String    @id @default(uuid())
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId String
  sortOrder   Int       @default(0)
}

// Product Model
model Product {
  id                String             @id @default(uuid())
  seller            Seller             @relation(fields: [sellerId], references: [id])
  sellerId          String
  name              String
  description       String?
  category          Category           @relation(fields: [categoryId], references: [id])
  categoryId        String
  price             Float
  salePrice         Float?
  stockQuantity     Int                @default(0)
  sku               String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?
  isActive          Boolean            @default(true)
  isApproved        Boolean            @default(false)
  averageRating     Float?
  reviewCount       Int                @default(0)
  weight            Float?
  height            Float?
  width             Float?
  depth             Float?
  images            ProductImage[]
  variants          ProductVariant[]
  productAttributes ProductAttribute[]
  orderItems        OrderItem[]
  reviews           ProductReview[]
  wishlistItems     WishlistItem[]
  browsingHistory   BrowsingHistory[]

  InventoryItem InventoryItem[]

  ShipmentItem ShipmentItem[]
}

// ProductAttribute Model
model ProductAttribute {
  id           String          @id @default(uuid())
  product      Product         @relation(fields: [productId], references: [id])
  productId    String
  attribute    Attribute       @relation(fields: [attributeId], references: [id])
  attributeId  String
  textValue    String?
  numberValue  Int?
  decimalValue Float?
  booleanValue Boolean?
  listValue    AttributeValue? @relation("AttributeValueProduct", fields: [listValueId], references: [id])
  listValueId  String?
}

// ProductVariant Model
model ProductVariant {
  id                String             @id @default(uuid())
  product           Product            @relation(fields: [productId], references: [id])
  productId         String
  sku               String             @unique
  stockQuantity     Int                @default(0)
  price             Float?
  salePrice         Float?
  imageUrl          String?
  isActive          Boolean            @default(true)
  images            ProductImage[]
  variantAttributes VariantAttribute[]
  orderItems        OrderItem[]

  InventoryItem InventoryItem[]

  ShipmentItem ShipmentItem[]
}

// VariantAttribute Model
model VariantAttribute {
  id          String         @id @default(uuid())
  variant     ProductVariant @relation(fields: [variantId], references: [id])
  variantId   String
  attribute   Attribute      @relation(fields: [attributeId], references: [id])
  attributeId String
  value       AttributeValue @relation(fields: [valueId], references: [id])
  valueId     String
}

// ProductImage Model
model ProductImage {
  id        String          @id @default(uuid())
  product   Product?        @relation(fields: [productId], references: [id])
  productId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?
  imageUrl  String
  sortOrder Int             @default(0)
  isPrimary Boolean         @default(false)
}

// Order Model
model Order {
  id                    String               @id @default(uuid())
  user                  User                 @relation(fields: [userId], references: [id])
  userId                String
  orderDate             DateTime             @default(now())
  status                OrderStatus          @default(CART)
  totalAmount           Float
  discountAmount        Float                @default(0)
  shippingAmount        Float                @default(0)
  finalAmount           Float
  shippingAddress       String
  billingAddress        String?
  notes                 String?
  shippingMethod        String?
  estimatedDeliveryDate DateTime?
  trackingNumber        String?
  items                 OrderItem[]
  payments              Payment[]
  statusHistory         OrderStatusHistory[]

  ProductReview ProductReview[]

  CouponUse CouponUse[]

  Fulfillment Fulfillment[]
}

enum OrderStatus {
  CART
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

// OrderItem Model
model OrderItem {
  id         String          @id @default(uuid())
  order      Order           @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product         @relation(fields: [productId], references: [id])
  productId  String
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  variantId  String?
  quantity   Int
  unitPrice  Float
  discount   Float           @default(0)
  totalPrice Float
  status     OrderItemStatus @default(PENDING)
}

enum OrderItemStatus {
  PENDING
  PREPARED
  SHIPPED
  DELIVERED
  RETURNED
  REFUNDED
}

// Payment Model
model Payment {
  id                  String        @id @default(uuid())
  order               Order         @relation(fields: [orderId], references: [id])
  orderId             String
  amount              Float
  method              PaymentMethod
  status              PaymentStatus @default(PENDING)
  paymentDate         DateTime?
  paymentReference    String?
  mobileMoneyProvider String?
  mobileMoneyNumber   String?
  cardDetails         String?
}

enum PaymentMethod {
  MOBILE_MONEY
  CREDIT_CARD
  BANK_TRANSFER
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// OrderStatusHistory Model
model OrderStatusHistory {
  id          String   @id @default(uuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  oldStatus   String?
  newStatus   String
  changedAt   DateTime @default(now())
  changedBy   User?    @relation(fields: [changedById], references: [id])
  changedById String?
  notes       String?
}

// ShippingZone Model
model ShippingZone {
  id            String         @id @default(uuid())
  name          String
  description   String?
  provinces     String?
  cities        String?
  isActive      Boolean        @default(true)
  shippingRates ShippingRate[]
}

// ShippingMethod Model
model ShippingMethod {
  id                    String         @id @default(uuid())
  name                  String
  description           String?
  estimatedDeliveryTime String?
  isActive              Boolean        @default(true)
  shippingRates         ShippingRate[]
}

// ShippingRate Model
model ShippingRate {
  id                 String         @id @default(uuid())
  zone               ShippingZone   @relation(fields: [zoneId], references: [id])
  zoneId             String
  method             ShippingMethod @relation(fields: [methodId], references: [id])
  methodId           String
  rate               Float
  minimumOrderAmount Float          @default(0)
  isFree             Boolean        @default(false)
}

// ProductReview Model
model ProductReview {
  id         String        @id @default(uuid())
  product    Product       @relation(fields: [productId], references: [id])
  productId  String
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  order      Order?        @relation(fields: [orderId], references: [id])
  orderId    String?
  rating     Int
  comment    String?
  reviewDate DateTime      @default(now())
  isApproved Boolean       @default(false)
  replies    ReviewReply[]
}

// ReviewReply Model
model ReviewReply {
  id        String        @id @default(uuid())
  review    ProductReview @relation(fields: [reviewId], references: [id])
  reviewId  String
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  reply     String
  replyDate DateTime      @default(now())
}

// WishlistItem Model
model WishlistItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  addedAt   DateTime @default(now())

  @@unique([userId, productId])
}

// BrowsingHistory Model
model BrowsingHistory {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  product      Product  @relation(fields: [productId], references: [id])
  productId    String
  viewedAt     DateTime @default(now())
  viewDuration Int? // in seconds
}

// Promotion Model
model Promotion {
  id                   String       @id @default(uuid())
  code                 String       @unique
  description          String?
  discountType         DiscountType
  discountValue        Float
  startDate            DateTime
  endDate              DateTime
  usageLimit           Int?
  timesUsed            Int          @default(0)
  minimumOrderAmount   Float        @default(0)
  isActive             Boolean      @default(true)
  isPublic             Boolean      @default(true)
  applicableCategories String?
  excludedProducts     String?
  couponUses           CouponUse[]
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// CouponUse Model
model CouponUse {
  id             String    @id @default(uuid())
  promotion      Promotion @relation(fields: [promotionId], references: [id])
  promotionId    String
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  order          Order     @relation(fields: [orderId], references: [id])
  orderId        String
  usedAt         DateTime  @default(now())
  discountAmount Float
}


// 1. Warehouse Model (Entrepôts)
model Warehouse {
  id               String       @id @default(uuid())
  name             String
  location         String    // Ville (Kinshasa, Lubumbashi, etc.)
  address          String
  isActive         Boolean   @default(true)
  inventoryItems   InventoryItem[]
  shipments        Shipment[]

  Fulfillment Fulfillment[]
}

// 2. Inventory Management (Stock par entrepôt)
model InventoryItem {
  id               String       @id @default(uuid())
  product          Product   @relation(fields: [productId], references: [id])
  productId        String
  variant          ProductVariant? @relation(fields: [variantId], references: [id])
  variantId        String?
  warehouse        Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId      String
  quantity         Int       @default(0)
  reservedQuantity Int       @default(0) // Quantité réservée pour les commandes
  lastStockUpdate  DateTime  @default(now())
}

// 3. Shipment Model (Envoi des vendeurs vers l'entrepôt)
model Shipment {
  id               String       @id @default(uuid())
  seller           Seller    @relation(fields: [sellerId], references: [id])
  sellerId         String
  warehouse        Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId      String
  trackingNumber   String?
  status           ShipmentStatus @default(PENDING)
  estimatedArrival DateTime?
  createdAt        DateTime  @default(now())
  shipmentItems    ShipmentItem[]
}

enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  RECEIVED
  CANCELLED
}

// 4. Shipment Items (Produits dans l'envoi)
model ShipmentItem {
  id               String       @id @default(uuid())
  shipment         Shipment  @relation(fields: [shipmentId], references: [id])
  shipmentId       String
  product          Product   @relation(fields: [productId], references: [id])
  productId        String
  variant          ProductVariant? @relation(fields: [variantId], references: [id])
  variantId        String?
  quantity         Int
  receivedQuantity Int?      // Quantité réellement reçue (peut différer)
}

// 5. Fulfillment Model (Traitement des commandes)
model Fulfillment {
  id               String       @id @default(uuid())
  order            Order     @relation(fields: [orderId], references: [id])
  orderId          String
  warehouse        Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId      String
  trackingNumber   String?
  status           FulfillmentStatus @default(PROCESSING)
  shippedAt        DateTime?
  deliveredAt      DateTime?
}

enum FulfillmentStatus {
  PROCESSING
  PACKED
  SHIPPED
  DELIVERED
  CANCELLED
}

// Auth.js Models

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}