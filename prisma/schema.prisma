// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model (Adapted for Auth.js)
model User {
  id            String     @id @default(cuid())
  name          String?
  lastname      String?
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  isVerified    Boolean    @default(false)
  lastLogin     DateTime?
  status        UserStatus @default(ACTIVE)

  Product Product[]
  Shop    Shop[]
  Review Review[]
  Cart Cart[]
  Address Address[]
  Order Order[]
  ProductDeposit ProductDeposit[]
}

enum UserType {
  CUSTOMER
  SELLER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Shop {
  id          String   @id @default(uuid())
  name        String
  description String?
  logo        String?
  banner      String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  owner    User      @relation(fields: [ownerId], references: [id])
  ownerId  String
  products Product[]

  @@index([name])
  @@index([slug])
  @@index([ownerId])
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String
  price         Decimal
  originalPrice Decimal? // Prix barré
  discount      Int? // Pourcentage de réduction
  stock         Int      @default(0)
  Category      Category @relation(fields: [categoryId], references: [id])
  categoryId    String
  sku           String   @unique
  rating        Float?   @default(0.0)
  reviewCount   Int      @default(0)
  isApproved    Boolean  @default(false) // Modération admin
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop           Shop             @relation(fields: [shopId], references: [id])
  shopId         String
  owner          User             @relation(fields: [ownerId], references: [id])
  ownerId        String
  ProductImage   ProductImage[]
  ProductVariant ProductVariant[]
  Review         Review[]

  // Index
  @@index([name])
  @@index([price])
  @@index([rating])
  @@index([shopId])
  @@index([ownerId])
  CartItem CartItem[]
  OrderItem OrderItem[]
  ShipmentItem ShipmentItem[]
  Inventory Inventory[]
  ProductDeposit ProductDeposit[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  altText   String?
  isPrimary Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([productId])
}

model ProductVariant {
  id        String  @id @default(uuid())
  name      String // ex: "Couleur", "Taille", etc.
  options   Json // Stocke les options de variantes (ex: ["Rouge", "Bleu", "Noir"])
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([productId])
  CartItem CartItem[]
  OrderItem OrderItem[]
  ShipmentItem ShipmentItem[]
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  slug        String     @unique
  image       String?
  isActive    Boolean    @default(true)
  parentId    String? // Pour les catégories imbriquées
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]

  @@index([name])
  @@index([slug])
}

model Review {
  id         String   @id @default(uuid())
  rating     Int      @default(0) // Note de 0 à 5
  title      String?
  comment    String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String

  @@index([productId])
  @@index([userId])
  @@index([rating])
}

model Cart {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      CartStatus  @default(ACTIVE) 
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @unique
  items       CartItem[]
  expiresAt   DateTime?

  @@index([userId])
  @@index([status])
  Order Order[]
}

enum CartStatus {
  ACTIVE     // En cours de modification
  ABANDONED  // Panier abandonné (après expiration)
  CONVERTED  // Converti en commande
}

model CartItem {
  id          String    @id @default(uuid())
  quantity    Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  cart        Cart      @relation(fields: [cartId], references: [id])
  cartId      String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  variantId   String?

  price       Decimal

  @@index([cartId])
  @@index([productId])
}

model Order {
  id          String        @id @default(uuid())
  orderNumber String        @unique // Ex: "CMD-2023-12345"
  status      OrderStatus   @default(PENDING)
  totalAmount Decimal
  taxAmount   Decimal       @default(0)
  shippingFee Decimal       @default(0)
  discount    Decimal       @default(0)
  grandTotal  Decimal
  
  // Informations client
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  shippingAddress Json      // Stocke l'adresse complète
  billingAddress Json       // Peut être différent de l'adresse de livraison
  
  // Paiement
  paymentMethod  String     // "Credit Card", "PayPal", etc.
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?     // ID du paiement chez le processeur
  
  // Livraison
  trackingNumber String?
  carrier        String?    // "FedEx", "UPS", etc.
  
  // Dates importantes
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  paidAt        DateTime?
  shippedAt     DateTime?
  deliveredAt   DateTime?
  
  // Relations
  items        OrderItem[]
  cart         Cart?        @relation(fields: [cartId], references: [id])
  cartId       String?      // Référence au panier converti
  
  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
  Shipping Shipping[]
  Billing Billing[]
  Shipment Shipment[]
}

model OrderItem {
  id          String    @id @default(uuid())
  quantity    Int
  price       Decimal   // Prix unitaire au moment de la commande
  totalPrice  Decimal   // price × quantity
  
  // Relations
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  variantId   String?
  
  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  PENDING     // Commande créée
  PROCESSING  // En préparation
  SHIPPED     // Expédiée
  DELIVERED   // Livrée
  CANCELLED   // Annulée
  RETURNED    // Retournée
}

enum PaymentStatus {
  PENDING     // En attente
  PAID        // Payé
  FAILED      // Échec
  REFUNDED    // Remboursé
  PARTIALLY_REFUNDED
}
model Address {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  
  @@index([userId])
  Warehouse Warehouse[]
}

model Shipping {
  id          String      @id @default(uuid())
  order       Order       @relation(fields: [orderId], references: [id])
  orderId     String      @unique
  address     Json        // { street, city, zipCode, country, phone }
  method      ShippingMethod  // "Standard", "Express", etc.
  cost        Decimal
  carrier     String?     // "FedEx", "UPS"
  trackingNumber String?
  status      ShippingStatus @default(PENDING)
  estimatedDelivery String? // "3-5 jours"
  
  @@index([orderId])
  @@index([trackingNumber])
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  INTERNATIONAL
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
}

model Billing {
  id          String      @id @default(uuid())
  order       Order       @relation(fields: [orderId], references: [id])
  orderId     String      @unique
  address     Json        // Peut être différent de l'adresse de livraison
  paymentMethod String    // "Credit Card", "PayPal"
  paymentId   String?     // ID du paiement (Stripe, PayPal)
  taxNumber   String?     // Pour les entreprises
  invoiceSent Boolean     @default(false)
  
  @@index([orderId])
  @@index([paymentId])
}

model Warehouse {
  id          String     @id @default(uuid())
  name        String     // "Entrepôt Nord", "Centre de distribution Paris"
  address     Address    @relation(fields: [addressId], references: [id])
  addressId   String
  isActive    Boolean    @default(true)
  capacity    Int?       // Capacité totale en unités (optionnel)
  
  // Relations
  inventory   Inventory[]
  shipments   Shipment[]
  
  @@index([name])
  @@index([addressId])
  ProductDeposit ProductDeposit[]
}

model Inventory {
  id          String     @id @default(uuid())
  product     Product    @relation(fields: [productId], references: [id])
  productId   String
  warehouse   Warehouse  @relation(fields: [warehouseId], references: [id])
  warehouseId String
  quantity    Int        @default(0)
  safetyStock Int        @default(10) // Stock minimum avant réapprovisionnement

  
  @@unique([productId, warehouseId]) // Unicité par combinaison
  @@index([productId])
  @@index([warehouseId])
}

model Shipment {
  id          String     @id @default(uuid())
  order       Order      @relation(fields: [orderId], references: [id])
  orderId     String
  warehouse   Warehouse  @relation(fields: [warehouseId], references: [id])
  warehouseId String
  carrier     String     // "FedEx", "Colissimo", etc.
  trackingNumber String?
  status      ShipmentStatus @default(PROCESSING)
  shippedAt   DateTime?
  estimatedDelivery DateTime?
  
  // Relations
  items       ShipmentItem[]
  
  @@index([orderId])
  @@index([warehouseId])
  @@index([trackingNumber])
}

enum ShipmentStatus {
  PROCESSING
  PACKED
  SHIPPED
  IN_TRANSIT
  DELIVERED
  RETURNED
}

model ShipmentItem {
  id          String    @id @default(uuid())
  shipment    Shipment  @relation(fields: [shipmentId], references: [id])
  shipmentId  String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  variantId   String?
  quantity    Int
  
  @@index([shipmentId])
  @@index([productId])
}



model ProductDeposit {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String     // Le vendeur qui dépose
  warehouse   Warehouse  @relation(fields: [warehouseId], references: [id])
  warehouseId String     // L'entrepôt de dépôt
  product     Product    @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int        // Quantité déposée
  depositDate DateTime   @default(now())
  status      DepositStatus @default(PENDING)
  notes       String?    // Commentaires (ex: "Colis fragile")

  @@index([userId])
  @@index([warehouseId])
  @@index([productId])
  @@index([depositDate])
}

enum DepositStatus {
  PENDING    // En attente de vérification
  APPROVED   // Accepté dans l'inventaire
  REJECTED   // Refusé (avec motif)
  RETURNED   // Retourné au vendeur
}